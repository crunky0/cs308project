from fastapi import APIRouter, HTTPException
from db import database
from pydantic import BaseModel
import os

router = APIRouter()

# Helper function to load SQL files
def load_sql_file(filename: str) -> str:
    file_path = os.path.join("sql", filename)
    with open(file_path, "r") as file:
        return file.read()

class OrderResponse(BaseModel):
    orderID: int
    userID: int
    productID: int
    orderStatus: str
    orderDate: str  # Assuming orders table has a timestamp column

@router.get("/customers/{user_id}/orders/", response_model=list[OrderResponse])
async def get_orders_by_customer(user_id: int):
    """
    Fetch all orders for a specific customer by their userID.
    """
    # Load the SQL query from the file
    get_orders_query = load_sql_file("get_orders_by_customer.sql")

    # Execute the query
    orders = await database.fetch_all(query=get_orders_query, values={"userID": user_id})
    
    if not orders:
        raise HTTPException(status_code=404, detail="No orders found for the specified customer")

    # Return the list of orders as a response
    return [OrderResponse(**order) for order in orders]